{
  "133648a9c732ed2236db67170cdfce86": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_definitions",
      "value": "main",
      "source": "examples/hello.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556393.2142253,
    "last_seen": 1747556393.2142258
  },
  "2104c6f39bf803393c8d816d21807984": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "name",
      "source": "examples/hello.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556393.2167227,
    "last_seen": 1747556393.216723
  },
  "5c3e9e7f73d66afb42f7aef525909e92": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "age",
      "source": "examples/hello.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556393.2190917,
    "last_seen": 1747556393.2190917
  },
  "651b09271b0bad5a8e8f952c7b3ee247": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "a",
      "source": "examples/hello.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556393.221948,
    "last_seen": 1747556393.221948
  },
  "48f667031a54248e8c1703815499265e": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "b",
      "source": "examples/hello.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556393.2248738,
    "last_seen": 1747556393.2248738
  },
  "b455f784a5d4f13597a1d889a373a415": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "c",
      "source": "examples/hello.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556393.227561,
    "last_seen": 1747556393.227561
  },
  "18fd386c3d6f51eec0e831962f5395ab": {
    "type": "code_sample",
    "data": {
      "code": "// Hello World program in GZ\n\nsimula main\n    sulat \"Hello, World!\"\n    sulat \"Welcome to GZ Programming Language!\"\n    \n    // Show some basic features\n    name = \"Juan\"\n    age = 25\n    \n    sulat \"My name is\", name\n    sulat \"I am\", age, \"years old\"\n    \n    // Simple calculation\n    a = 10\n    b = 20\n    c = a + b\n    \n    sulat \"The sum of\", a, \"and\", b, \"is\", c\n    \n    balik 0\n",
      "source": "examples/hello.gz",
      "timestamp": 1747556393.2310312
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556393.2310646,
    "last_seen": 1747556393.2310646
  },
  "9abaef23ab45332a30a03058cdcee186": {
    "type": "optimization_event",
    "data": {
      "original_code": "// GZ Program that needs optimization\n// This program demonstrates various patterns that can be optimized\n\nsimula main\n    // Inefficient variable assignments\n    x = 10\n    x = x + 1\n    y = 20\n    y = y - 5\n    z = 30\n    z = z * 2\n    \n    // Inefficient boolean comparisons\n    flag1 = tama\n    flag2 = mali\n    \n    kung flag1 == tama\n        sulat \"Flag1 is true\"\n    \n    kung flag2 == mali\n        sulat \"Flag2 is false\"\n    \n    // Inefficient loop syntax\n    para i = 1 hanggang 5\n        sulat \"Iteration\", i\n    \n    // Inefficient string concatenation\n    message = \"Hello\"\n    message = message + \", \"\n    message = message + \"World\"\n    message = message + \"!\"\n    sulat message\n    \n    // Inefficient array operations\n    numbers = []\n    numbers.append(1)\n    numbers.append(2)\n    numbers.append(3)\n    numbers.append(4)\n    numbers.append(5)\n    \n    sum = 0\n    para i = 0 hanggang len(numbers) - 1\n        sum = sum + numbers[i]\n    \n    sulat \"Sum:\", sum\n    \n    // Inefficient conditional checks\n    value = 42\n    \n    kung value > 0\n        kung value < 100\n            sulat \"Value is between 0 and 100\"\n    \n    // Inefficient function calls\n    result1 = calculate(10)\n    result2 = calculate(20)\n    result3 = calculate(30)\n    \n    sulat \"Results:\", result1, result2, result3\n    \n    balik 0\n\n// Inefficient function implementation\nsimula calculate input\n    // Unnecessary temporary variables\n    temp1 = input * 2\n    temp2 = temp1 + 5\n    temp3 = temp2 / 3\n    \n    // Inefficient loop\n    para i = 0 hanggang 3\n        temp3 = temp3 + i\n    \n    balik temp3\n",
      "optimized_code": "// GZ Program that needs optimization\n// This program demonstrates various patterns that can be optimized\n\nsimula main\n    // Inefficient variable assignments\n    x = 10\n    x += 1\n    y = 20\n    y = y - 5\n    z = 30\n    z = z * 2\n    \n    // Inefficient boolean comparisons\n    flag1 = tama\n    flag2 = mali\n    \n    kung flag1\n        sulat \"Flag1 is true\"\n    \n    kung flag2 == mali\n        sulat \"Flag2 is false\"\n    \n    // Inefficient loop syntax\n    para i 1 5\n        sulat \"Iteration\", i\n    \n    // Inefficient string concatenation\n    message = \"Hello\"\n    message = message + \", \"\n    message = message + \"World\"\n    message = message + \"!\"\n    sulat message\n    \n    // Inefficient array operations\n    numbers = []\n    numbers.append(1)\n    numbers.append(2)\n    numbers.append(3)\n    numbers.append(4)\n    numbers.append(5)\n    \n    sum = 0\n    para i = 0 hanggang len(numbers) - 1\n        sum = sum + numbers[i]\n    \n    sulat \"Sum:\", sum\n    \n    // Inefficient conditional checks\n    value = 42\n    \n    kung value > 0\n        kung value < 100\n            sulat \"Value is between 0 and 100\"\n    \n    // Inefficient function calls\n    result1 = calculate(10)\n    result2 = calculate(20)\n    result3 = calculate(30)\n    \n    sulat \"Results:\", result1, result2, result3\n    \n    balik 0\n\n// Inefficient function implementation\nsimula calculate input\n    // Unnecessary temporary variables\n    temp1 = input * 2\n    temp2 = temp1 + 5\n    temp3 = temp2 / 3\n    \n    // Inefficient loop\n    para i 0 3\n        temp3 = temp3 + i\n    \n    balik temp3\n",
      "applied_techniques": [
        "compound_assignment",
        "boolean_simplification",
        "loop_range"
      ],
      "optimization_level": 1,
      "timestamp": 1747556408.950779
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556408.9508476,
    "last_seen": 1747556408.9508476
  },
  "269c6a3ef8039716156a53e3adaebf21": {
    "type": "optimization_rule",
    "data": {
      "name": "compound_+",
      "pattern": "(x)\\s*=\\s*\\1\\s*\\+\\s*(1)",
      "replacement": "\\1 += \\2",
      "explanation": "Use compound assignment for + operation"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556408.9544704,
    "last_seen": 1747556408.9544706
  },
  "5d81db3597d12d3ccb1916a9be78f039": {
    "type": "optimization_rule",
    "data": {
      "name": "compound_-",
      "pattern": "(y)\\s*=\\s*\\1\\s*\\-\\s*(5)",
      "replacement": "\\1 -= \\2",
      "explanation": "Use compound assignment for - operation"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556408.9574642,
    "last_seen": 1747556408.9574642
  },
  "cd29f96dd57e252c18713e7e4e0cf962": {
    "type": "optimization_rule",
    "data": {
      "name": "compound_*",
      "pattern": "(z)\\s*=\\s*\\1\\s*\\*\\s*(2)",
      "replacement": "\\1 *= \\2",
      "explanation": "Use compound assignment for * operation"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556408.960198,
    "last_seen": 1747556408.9601982
  },
  "60097d097e8ce095e42f5698bf484e93": {
    "type": "optimization_rule",
    "data": {
      "name": "compound_+",
      "pattern": "(sum)\\s*=\\s*\\1\\s*\\+\\s*(numbers)",
      "replacement": "\\1 += \\2",
      "explanation": "Use compound assignment for + operation"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556408.96317,
    "last_seen": 1747556408.96317
  },
  "6fda1ea138d276a3621c22730a034b4e": {
    "type": "optimization_rule",
    "data": {
      "name": "compound_+",
      "pattern": "(temp3)\\s*=\\s*\\1\\s*\\+\\s*(i)",
      "replacement": "\\1 += \\2",
      "explanation": "Use compound assignment for + operation"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556408.9662116,
    "last_seen": 1747556408.9662116
  },
  "0b96a9b32cf6106b30ff44dc5b7cfead": {
    "type": "optimization_rule",
    "data": {
      "name": "simplify_boolean_comparison",
      "pattern": "kung\\s+(\\w+)\\s*==\\s*tama",
      "replacement": "kung \\1",
      "explanation": "Simplify boolean comparison with 'tama'"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556408.9689195,
    "last_seen": 1747556408.9689195
  },
  "c792986c2276868f9e935a7954aebc1f": {
    "type": "optimization_rule",
    "data": {
      "name": "simplify_loop",
      "pattern": "para\\s+(\\w+)\\s*=\\s*(\\d+)\\s*hanggang\\s*(\\d+)",
      "replacement": "para \\1 \\2 \\3",
      "explanation": "Simplify loop syntax"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556408.9724824,
    "last_seen": 1747556408.972483
  },
  "ae0c9ed0b0cbe81e31c4d940955f42fa": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_definitions",
      "value": "calculate_statistics",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556632.9190361,
    "last_seen": 1747556632.9190364
  },
  "a5db5f1a8509456d506ef3e944c271db": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_definitions",
      "value": "fibonacci",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556632.922197,
    "last_seen": 1747556632.922197
  },
  "e8f8bb11cadc6a03880d8cce476528c6": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_definitions",
      "value": "is_prime",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556632.9257164,
    "last_seen": 1747556632.9257166
  },
  "c3aeb6f093a12c29e62e290502f3b63a": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_definitions",
      "value": "bubble_sort",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556632.929837,
    "last_seen": 1747556632.9298372
  },
  "7691e277cb2af5cef658956b8cacb000": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_definitions",
      "value": "main",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556632.9328215,
    "last_seen": 1747556632.9328215
  },
  "41be9060bd58639b70a3f4ecf08ab167": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_calls",
      "value": "len",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 2,
    "confidence": 0.5,
    "created": 1747556632.9356654,
    "last_seen": 1747556632.9424894
  },
  "9632b4d2527010f8ccaee82c1a428a34": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_calls",
      "value": "append",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556632.938629,
    "last_seen": 1747556632.938629
  },
  "b5994bf9e1c3e9e352de30197c6110ad": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_calls",
      "value": "calculate_statistics",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556632.9427142,
    "last_seen": 1747556632.9427142
  },
  "6c73b4fa974b7c507eb8310b9d5386de": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_calls",
      "value": "fibonacci",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556632.9463289,
    "last_seen": 1747556632.9463289
  },
  "261a5b7c69236996ca7db1b0e56a98e8": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_calls",
      "value": "is_prime",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556632.949481,
    "last_seen": 1747556632.9494812
  },
  "e5526ddc7a40ee8883e1dc479176a668": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_calls",
      "value": "bubble_sort",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556632.952762,
    "last_seen": 1747556632.9527621
  },
  "5fb93717ab14a0047b35f33f15815831": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "count",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556632.9558778,
    "last_seen": 1747556632.9558783
  },
  "cb1cb6901537e404a50658d8337d7896": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "sum",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 2,
    "confidence": 0.5,
    "created": 1747556632.960012,
    "last_seen": 1747556632.9732356
  },
  "230112c347fa935920207ea9f29ba1df": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "min_val",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 2,
    "confidence": 0.5,
    "created": 1747556632.9632466,
    "last_seen": 1747556632.973918
  },
  "e076e4fda806748144d4b5aa295ea3f8": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "max_val",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 2,
    "confidence": 0.5,
    "created": 1747556632.9667165,
    "last_seen": 1747556632.9741554
  },
  "3e94adac32f7995ac3e6960d7ccf32ef": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "current",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556632.9699643,
    "last_seen": 1747556632.9699645
  },
  "feda76f9e638ac7ccdb4f3bd30f79be9": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "average",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556632.9743793,
    "last_seen": 1747556632.9743795
  },
  "06a9acc07dc58a358b2b518171dda7f6": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "stats",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 2,
    "confidence": 0.5,
    "created": 1747556632.9783697,
    "last_seen": 1747556633.0146775
  },
  "45ab02c215997067f34a104827ef1012": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "n",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 4,
    "confidence": 0.5,
    "created": 1747556632.9818783,
    "last_seen": 1747556633.014809
  },
  "ee4cd11185b2071397205e5fa5fc8321": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "sequence",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556632.9856327,
    "last_seen": 1747556632.9856331
  },
  "f91774c93b979b5ac39f4c057e5f3e07": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "next_number",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556632.989014,
    "last_seen": 1747556632.9890144
  },
  "d68595168d1745c1605e92c955ee2d23": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "2",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556632.9936845,
    "last_seen": 1747556632.9936845
  },
  "a8a05d4759860882b53ae26c2e1ec0db": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "3",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556632.9973068,
    "last_seen": 1747556632.9973068
  },
  "5ca6d2cba710a61a72a8564e09179148": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "i",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 3,
    "confidence": 0.5,
    "created": 1747556633.0009832,
    "last_seen": 1747556633.0048475
  },
  "5e842e1dfe8f3eaebdb7828278420d28": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "temp",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.005265,
    "last_seen": 1747556633.0052652
  },
  "23fb4f980e16f185f83213e3ce2e75d2": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "numbers",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.0105119,
    "last_seen": 1747556633.010512
  },
  "360b12e8d2654880bafc68976095f136": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "fib_sequence",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.0149417,
    "last_seen": 1747556633.014942
  },
  "add257c4768aee0fe33df67ceea0018d": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "unsorted",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.0186539,
    "last_seen": 1747556633.0186539
  },
  "d7eb52bac58a167b4dd829fcb6a8f1df": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "sorted",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.0223186,
    "last_seen": 1747556633.0223186
  },
  "33112bc22dfea8ff21f90e39c868a994": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "current < min_val",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.0272305,
    "last_seen": 1747556633.0272307
  },
  "aeacee30033e8292a3c07cbc95a57d30": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "current > max_val",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.0315218,
    "last_seen": 1747556633.031522
  },
  "963135ef64dec845b4ada2938f8b89ed": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "n <= 0",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.0357404,
    "last_seen": 1747556633.0357404
  },
  "ffdcbab3709c4231a34ce817af3f66c0": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "n == 1",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.041753,
    "last_seen": 1747556633.041753
  },
  "c84dd9b63826e84ce4100a663f1c300d": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "n == 2",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.0473118,
    "last_seen": 1747556633.0473118
  },
  "d182f4bbfc38fec8dad464a098bbd231": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "n <= 1",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.0513294,
    "last_seen": 1747556633.0513294
  },
  "9eb482d415808522055fa0df71f6426f": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "n <= 3",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.055352,
    "last_seen": 1747556633.0553522
  },
  "0a4ab3b2e6076343cde5f013203bdfd5": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "n % 2 == 0 or n % 3 == 0",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.059985,
    "last_seen": 1747556633.0599852
  },
  "32d2fbb0a9304ba24c66ac5ec9e48304": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "n % i == 0 or n % (i + 2) == 0",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.0646398,
    "last_seen": 1747556633.06464
  },
  "b35118d8f67f1d398ca7f77972408b53": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "arr[j] > arr[j + 1]",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.068863,
    "last_seen": 1747556633.0688632
  },
  "d3588b92f92f7b160d28d8e1f8af6ca3": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "is_prime(num)",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.0727262,
    "last_seen": 1747556633.0727262
  },
  "c979e310f389a6dff459c9c8c8356fb4": {
    "type": "syntax_pattern",
    "data": {
      "type": "loops",
      "value": "i",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 3,
    "confidence": 0.5,
    "created": 1747556633.077495,
    "last_seen": 1747556633.0817778
  },
  "fc68440976eb55d612e2098e595cab5b": {
    "type": "syntax_pattern",
    "data": {
      "type": "loops",
      "value": "j",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.0818946,
    "last_seen": 1747556633.0818946
  },
  "0f886bbad097e178c61fd84cca25f8af": {
    "type": "syntax_pattern",
    "data": {
      "type": "loops",
      "value": "num",
      "source": "examples/advanced_patterns.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.0862603,
    "last_seen": 1747556633.0862603
  },
  "3d6c0a00f9d26b6c70f04c67325689b1": {
    "type": "code_sample",
    "data": {
      "code": "// Advanced GZ Programming Patterns\n// This file demonstrates advanced programming patterns in GZ\n\n// Advanced function with multiple parameters and return value\nsimula calculate_statistics numbers\n    // Variable declarations\n    count = len(numbers)\n    sum = 0\n    min_val = numbers[0]\n    max_val = numbers[0]\n    \n    // Calculate sum, min, and max\n    para i 0 count - 1\n        current = numbers[i]\n        sum = sum + current\n        \n        kung current < min_val\n            min_val = current\n        \n        kung current > max_val\n            max_val = current\n    \n    // Calculate average\n    average = sum / count\n    \n    // Create and return statistics object\n    stats = {\n        \"count\": count,\n        \"sum\": sum,\n        \"average\": average,\n        \"min\": min_val,\n        \"max\": max_val,\n        \"range\": max_val - min_val\n    }\n    \n    balik stats\n\n// Function to generate Fibonacci sequence\nsimula fibonacci n\n    // Handle edge cases\n    kung n <= 0\n        balik []\n    kung n == 1\n        balik [0]\n    kung n == 2\n        balik [0, 1]\n    \n    // Initialize sequence with first two numbers\n    sequence = [0, 1]\n    \n    // Generate remaining numbers\n    para i 2 n - 1\n        next_number = sequence[i-1] + sequence[i-2]\n        sequence.append(next_number)\n    \n    balik sequence\n\n// Function to check if a number is prime\nsimula is_prime n\n    // Handle edge cases\n    kung n <= 1\n        balik mali\n    kung n <= 3\n        balik tama\n    kung n % 2 == 0 or n % 3 == 0\n        balik mali\n    \n    // Check for divisibility by numbers of form 6k \u00c2\u00b1 1\n    i = 5\n    habang i * i <= n\n        kung n % i == 0 or n % (i + 2) == 0\n            balik mali\n        i = i + 6\n    \n    balik tama\n\n// Function to sort an array using bubble sort\nsimula bubble_sort arr\n    n = len(arr)\n    \n    // Traverse through all array elements\n    para i 0 n - 1\n        // Last i elements are already in place\n        para j 0 n - i - 1\n            // Swap if current element is greater than next element\n            kung arr[j] > arr[j + 1]\n                temp = arr[j]\n                arr[j] = arr[j + 1]\n                arr[j + 1] = temp\n    \n    balik arr\n\n// Main function to demonstrate the advanced patterns\nsimula main\n    // Test calculate_statistics function\n    numbers = [23, 45, 12, 67, 89, 34, 56]\n    sulat \"Statistics for\", numbers\n    stats = calculate_statistics(numbers)\n    sulat \"Count:\", stats[\"count\"]\n    sulat \"Sum:\", stats[\"sum\"]\n    sulat \"Average:\", stats[\"average\"]\n    sulat \"Min:\", stats[\"min\"]\n    sulat \"Max:\", stats[\"max\"]\n    sulat \"Range:\", stats[\"range\"]\n    \n    // Test fibonacci function\n    n = 10\n    sulat \"\\nFibonacci sequence of length\", n\n    fib_sequence = fibonacci(n)\n    sulat fib_sequence\n    \n    // Test is_prime function\n    sulat \"\\nChecking prime numbers:\"\n    para num 10 20\n        kung is_prime(num)\n            sulat num, \"is prime\"\n        kundi\n            sulat num, \"is not prime\"\n    \n    // Test bubble_sort function\n    unsorted = [64, 34, 25, 12, 22, 11, 90]\n    sulat \"\\nUnsorted array:\", unsorted\n    sorted = bubble_sort(unsorted)\n    sulat \"Sorted array:\", sorted\n    \n    balik 0\n",
      "source": "examples/advanced_patterns.gz",
      "timestamp": 1747556633.0908012
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747556633.0908728,
    "last_seen": 1747556633.090873
  },
  "1e235afc0f1d89b1c205d9c5d244a306": {
    "type": "correction_event",
    "data": {
      "original_code": "// GZ UI Demo\n// This program demonstrates the UI capabilities of the GZ programming language.\n\n// Define UI elements\nui_element main_window {\n    type: window;\n    title: \"GZ UI Demo\";\n    width: 800;\n    height: 600;\n}\n\nui_element hello_button {\n    type: button;\n    text: \"Say Hello\";\n    width: 100;\n    height: 30;\n}\n\nui_element name_input {\n    type: textbox;\n    placeholder: \"Enter your name\";\n    width: 200;\n    height: 30;\n}\n\nui_element output_label {\n    type: label;\n    text: \"Output will appear here\";\n    width: 400;\n    height: 30;\n}\n\n// Define layout\nui_layout main_layout {\n    main_window -> name_input;\n    main_window -> hello_button;\n    main_window -> output_label;\n    \n    name_input @ (center, top + 100);\n    hello_button @ (center, below name_input + 20);\n    output_label @ (center, below hello_button + 20);\n}\n\n// Define style\nui_style button_style {\n    target: hello_button;\n    background-color: #3498db;\n    text-color: white;\n    font-size: 14;\n    border-radius: 5;\n}\n\nui_style input_style {\n    target: name_input;\n    border-color: #3498db;\n    border-width: 1;\n    font-size: 14;\n    padding: 5;\n}\n\nui_style label_style {\n    target: output_label;\n    text-color: #2c3e50;\n    font-size: 16;\n    font-weight: bold;\n}\n\n// Define events\nui_event main_events {\n    hello_button onClick: say_hello;\n}\n\n// Main function\nsimula main\n    // Initialize UI\n    init_ui()\n    \n    // Show main window\n    show_window(main_window)\n    \n    // Start UI event loop\n    ui_event_loop()\n    \n    balik 0\n\n// Event handler\nsimula say_hello\n    // Get name from input\n    name = get_text(name_input)\n    \n    // Check if name is empty\n    kung name == \"\"\n        name = \"World\"\n    \n    // Set output label text\n    set_text(output_label, \"Hello, \" + name + \"!\")\n    \n    balik tama\n",
      "corrected_code": "// GZ UI Demo\n// This program demonstrates the UI capabilities of the GZ programming language.\n\n// Define UI elements\nui_element main_window \n    type: window\n    title: \"GZ UI Demo\"\n    width: 800\n    height: 600\n\n\nui_element hello_button \n    type: button\n    text: \"Say Hello\"\n    width: 100\n    height: 30\n\n\nui_element name_input \n    type: textbox\n    placeholder: \"Enter your name\"\n    width: 200\n    height: 30\n\n\nui_element output_label \n    type: label\n    text: \"Output will appear here\"\n    width: 400\n    height: 30\n\n\n// Define layout\nui_layout main_layout \n    main_window -> name_input\n    main_window -> hello_button\n    main_window -> output_label\n    \n    name_input @ (center, top + 100)\n    hello_button @ (center, below name_input + 20)\n    output_label @ (center, below hello_button + 20)\n\n\n// Define style\nui_style button_style \n    target: hello_button\n    background-color: #3498db\n    text-color: white\n    font-size: 14\n    border-radius: 5\n\n\nui_style input_style \n    target: name_input\n    border-color: #3498db\n    border-width: 1\n    font-size: 14\n    padding: 5\n\n\nui_style label_style \n    target: output_label\n    text-color: #2c3e50\n    font-size: 16\n    font-weight: bold\n\n\n// Define events\nui_event main_events \n    hello_button onClick: say_hello\n\n\n// Main function\nsimula main\n    // Initialize UI\n    init_ui \n    \n    // Show main window\n    show_window main_window\n    \n    // Start UI event loop\n    ui_event_loop \n    \n    balik 0\n\n// Event handler\nsimula say_hello\n    // Get name from input\n    name = get_text name_input\n    \n    // Check if name is empty\n    kung name == \"\"\n        name = \"World\"\n    \n    // Set output label text\n    set_text output_label, \"Hello, \" + name + \"!\"\n    \n    balik tama\n",
      "error_message": null,
      "applied_rules": [
        "function_call_with_parentheses",
        "semicolons",
        "braces"
      ],
      "timestamp": 1747558409.0715156
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558409.0715911,
    "last_seen": 1747558409.0715911
  },
  "3bbbc1ab6f96ee7d870837cdb5814fba": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_definitions",
      "value": "main",
      "source": "examples/ui_demo.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558414.4260206,
    "last_seen": 1747558414.426021
  },
  "1971123bea4ebbc03bb1e929363e8deb": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_definitions",
      "value": "say_hello",
      "source": "examples/ui_demo.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558414.4360015,
    "last_seen": 1747558414.4360015
  },
  "5d19fd8cebc6e4a70694cac58db99ff1": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "name",
      "source": "examples/ui_demo.gz"
    },
    "frequency": 3,
    "confidence": 0.5,
    "created": 1747558414.4435472,
    "last_seen": 1747558414.4514875
  },
  "8a8ab37b86a112c21686ff327b229ba8": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "name == \"\"",
      "source": "examples/ui_demo.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558414.451735,
    "last_seen": 1747558414.4517353
  },
  "83f8b1aac83703548e2fd68d60d6dffa": {
    "type": "code_sample",
    "data": {
      "code": "// GZ UI Demo\n// This program demonstrates the UI capabilities of the GZ programming language.\n\n// Define UI elements\nui_element main_window \n    type: window\n    title: \"GZ UI Demo\"\n    width: 800\n    height: 600\n\n\nui_element hello_button \n    type: button\n    text: \"Say Hello\"\n    width: 100\n    height: 30\n\n\nui_element name_input \n    type: textbox\n    placeholder: \"Enter your name\"\n    width: 200\n    height: 30\n\n\nui_element output_label \n    type: label\n    text: \"Output will appear here\"\n    width: 400\n    height: 30\n\n\n// Define layout\nui_layout main_layout \n    main_window -> name_input\n    main_window -> hello_button\n    main_window -> output_label\n    \n    name_input @ (center, top + 100)\n    hello_button @ (center, below name_input + 20)\n    output_label @ (center, below hello_button + 20)\n\n\n// Define style\nui_style button_style \n    target: hello_button\n    background-color: #3498db\n    text-color: white\n    font-size: 14\n    border-radius: 5\n\n\nui_style input_style \n    target: name_input\n    border-color: #3498db\n    border-width: 1\n    font-size: 14\n    padding: 5\n\n\nui_style label_style \n    target: output_label\n    text-color: #2c3e50\n    font-size: 16\n    font-weight: bold\n\n\n// Define events\nui_event main_events \n    hello_button onClick: say_hello\n\n\n// Main function\nsimula main\n    // Initialize UI\n    init_ui \n    \n    // Show main window\n    show_window main_window\n    \n    // Start UI event loop\n    ui_event_loop \n    \n    balik 0\n\n// Event handler\nsimula say_hello\n    // Get name from input\n    name = get_text name_input\n    \n    // Check if name is empty\n    kung name == \"\"\n        name = \"World\"\n    \n    // Set output label text\n    set_text output_label, \"Hello, \" + name + \"!\"\n    \n    balik tama\n",
      "source": "examples/ui_demo.gz",
      "timestamp": 1747558414.4586322
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558414.4587078,
    "last_seen": 1747558414.4587078
  },
  "46a998450ca9b16b98f2c695af77974d": {
    "type": "correction_event",
    "data": {
      "original_code": "// GZ UI Example\n// This example demonstrates the UI capabilities of the GZ programming language\n\n// Define UI elements\nui_element main_window {\n    type: window;\n    title: \"GZ Calculator\";\n    width: 300;\n    height: 400;\n    background: #f0f0f0;\n}\n\nui_element display {\n    type: textbox;\n    width: 280;\n    height: 50;\n    readonly: tama;\n    text: \"0\";\n    font-size: 24;\n}\n\nui_element button_1 {\n    type: button;\n    text: \"1\";\n    width: 60;\n    height: 60;\n}\n\nui_element button_2 {\n    type: button;\n    text: \"2\";\n    width: 60;\n    height: 60;\n}\n\nui_element button_3 {\n    type: button;\n    text: \"3\";\n    width: 60;\n    height: 60;\n}\n\nui_element button_4 {\n    type: button;\n    text: \"4\";\n    width: 60;\n    height: 60;\n}\n\nui_element button_5 {\n    type: button;\n    text: \"5\";\n    width: 60;\n    height: 60;\n}\n\nui_element button_6 {\n    type: button;\n    text: \"6\";\n    width: 60;\n    height: 60;\n}\n\nui_element button_7 {\n    type: button;\n    text: \"7\";\n    width: 60;\n    height: 60;\n}\n\nui_element button_8 {\n    type: button;\n    text: \"8\";\n    width: 60;\n    height: 60;\n}\n\nui_element button_9 {\n    type: button;\n    text: \"9\";\n    width: 60;\n    height: 60;\n}\n\nui_element button_0 {\n    type: button;\n    text: \"0\";\n    width: 60;\n    height: 60;\n}\n\nui_element button_plus {\n    type: button;\n    text: \"+\";\n    width: 60;\n    height: 60;\n}\n\nui_element button_minus {\n    type: button;\n    text: \"-\";\n    width: 60;\n    height: 60;\n}\n\nui_element button_multiply {\n    type: button;\n    text: \"*\";\n    width: 60;\n    height: 60;\n}\n\nui_element button_divide {\n    type: button;\n    text: \"/\";\n    width: 60;\n    height: 60;\n}\n\nui_element button_equals {\n    type: button;\n    text: \"=\";\n    width: 60;\n    height: 60;\n}\n\nui_element button_clear {\n    type: button;\n    text: \"C\";\n    width: 60;\n    height: 60;\n}\n\n// Define layout\nui_layout calculator_layout {\n    main_window -> display;\n    main_window -> button_1;\n    main_window -> button_2;\n    main_window -> button_3;\n    main_window -> button_4;\n    main_window -> button_5;\n    main_window -> button_6;\n    main_window -> button_7;\n    main_window -> button_8;\n    main_window -> button_9;\n    main_window -> button_0;\n    main_window -> button_plus;\n    main_window -> button_minus;\n    main_window -> button_multiply;\n    main_window -> button_divide;\n    main_window -> button_equals;\n    main_window -> button_clear;\n    \n    display @ top:10,left:10,right:10;\n    \n    button_7 @ top:70,left:10;\n    button_8 @ top:70,left:80;\n    button_9 @ top:70,left:150;\n    button_divide @ top:70,left:220;\n    \n    button_4 @ top:140,left:10;\n    button_5 @ top:140,left:80;\n    button_6 @ top:140,left:150;\n    button_multiply @ top:140,left:220;\n    \n    button_1 @ top:210,left:10;\n    button_2 @ top:210,left:80;\n    button_3 @ top:210,left:150;\n    button_minus @ top:210,left:220;\n    \n    button_0 @ top:280,left:10;\n    button_clear @ top:280,left:80;\n    button_equals @ top:280,left:150;\n    button_plus @ top:280,left:220;\n}\n\n// Define style\nui_style calculator_style {\n    background-color: #f0f0f0;\n    text-color: #333333;\n    font-family: \"Arial\";\n    font-size: 18;\n}\n\nui_style button_style {\n    background-color: #4CAF50;\n    text-color: white;\n    border-radius: 5;\n    font-weight: bold;\n}\n\nui_style display_style {\n    background-color: white;\n    text-color: #333333;\n    border: 1px solid #cccccc;\n    text-align: right;\n    padding: 10;\n}\n\n// Define events\nui_event calculator_events {\n    button_0 onClick: function_append_digit(\"0\");\n    button_1 onClick: function_append_digit(\"1\");\n    button_2 onClick: function_append_digit(\"2\");\n    button_3 onClick: function_append_digit(\"3\");\n    button_4 onClick: function_append_digit(\"4\");\n    button_5 onClick: function_append_digit(\"5\");\n    button_6 onClick: function_append_digit(\"6\");\n    button_7 onClick: function_append_digit(\"7\");\n    button_8 onClick: function_append_digit(\"8\");\n    button_9 onClick: function_append_digit(\"9\");\n    \n    button_plus onClick: function_set_operator(\"+\");\n    button_minus onClick: function_set_operator(\"-\");\n    button_multiply onClick: function_set_operator(\"*\");\n    button_divide onClick: function_set_operator(\"/\");\n    \n    button_equals onClick: function_calculate;\n    button_clear onClick: function_clear;\n}\n\n// Global variables\ncurrent_value = 0\ndisplay_value = \"0\"\noperator = \"\"\nnew_operand = tama\n\n// Main function\nsimula main\n    // Initialize UI\n    init_ui()\n    \n    // Show main window\n    show_window(main_window)\n    \n    // Start event loop\n    start_event_loop()\n    \n    balik 0\n\n// Function to append a digit to the display\nsimula function_append_digit digit\n    kung new_operand\n        display_value = digit\n        new_operand = mali\n    kundi\n        kung display_value == \"0\"\n            display_value = digit\n        kundi\n            display_value = display_value + digit\n    \n    set_text(display, display_value)\n    balik tama\n\n// Function to set the operator\nsimula function_set_operator op\n    current_value = parse_number(display_value)\n    operator = op\n    new_operand = tama\n    balik tama\n\n// Function to calculate the result\nsimula function_calculate\n    second_value = parse_number(display_value)\n    result = 0\n    \n    kung operator == \"+\"\n        result = current_value + second_value\n    kundi kung operator == \"-\"\n        result = current_value - second_value\n    kundi kung operator == \"*\"\n        result = current_value * second_value\n    kundi kung operator == \"/\"\n        kung second_value == 0\n            set_text(display, \"Error\")\n            balik tama\n        result = current_value / second_value\n    \n    display_value = to_string(result)\n    set_text(display, display_value)\n    \n    current_value = result\n    new_operand = tama\n    \n    balik tama\n\n// Function to clear the calculator\nsimula function_clear\n    current_value = 0\n    display_value = \"0\"\n    operator = \"\"\n    new_operand = tama\n    \n    set_text(display, display_value)\n    balik tama\n\n// Helper function to parse a number from a string\nsimula parse_number str\n    balik to_number(str)\n\n// Helper function to convert a number to a string\nsimula to_string num\n    balik num\n",
      "corrected_code": "// GZ UI Example\n// This example demonstrates the UI capabilities of the GZ programming language\n\n// Define UI elements\nui_element main_window \n    type: window\n    title: \"GZ Calculator\"\n    width: 300\n    height: 400\n    background: #f0f0f0\n\n\nui_element display \n    type: textbox\n    width: 280\n    height: 50\n    readonly: tama\n    text: \"0\"\n    font-size: 24\n\n\nui_element button_1 \n    type: button\n    text: \"1\"\n    width: 60\n    height: 60\n\n\nui_element button_2 \n    type: button\n    text: \"2\"\n    width: 60\n    height: 60\n\n\nui_element button_3 \n    type: button\n    text: \"3\"\n    width: 60\n    height: 60\n\n\nui_element button_4 \n    type: button\n    text: \"4\"\n    width: 60\n    height: 60\n\n\nui_element button_5 \n    type: button\n    text: \"5\"\n    width: 60\n    height: 60\n\n\nui_element button_6 \n    type: button\n    text: \"6\"\n    width: 60\n    height: 60\n\n\nui_element button_7 \n    type: button\n    text: \"7\"\n    width: 60\n    height: 60\n\n\nui_element button_8 \n    type: button\n    text: \"8\"\n    width: 60\n    height: 60\n\n\nui_element button_9 \n    type: button\n    text: \"9\"\n    width: 60\n    height: 60\n\n\nui_element button_0 \n    type: button\n    text: \"0\"\n    width: 60\n    height: 60\n\n\nui_element button_plus \n    type: button\n    text: \"+\"\n    width: 60\n    height: 60\n\n\nui_element button_minus \n    type: button\n    text: \"-\"\n    width: 60\n    height: 60\n\n\nui_element button_multiply \n    type: button\n    text: \"*\"\n    width: 60\n    height: 60\n\n\nui_element button_divide \n    type: button\n    text: \"/\"\n    width: 60\n    height: 60\n\n\nui_element button_equals \n    type: button\n    text: \"=\"\n    width: 60\n    height: 60\n\n\nui_element button_clear \n    type: button\n    text: \"C\"\n    width: 60\n    height: 60\n\n\n// Define layout\nui_layout calculator_layout \n    main_window -> display\n    main_window -> button_1\n    main_window -> button_2\n    main_window -> button_3\n    main_window -> button_4\n    main_window -> button_5\n    main_window -> button_6\n    main_window -> button_7\n    main_window -> button_8\n    main_window -> button_9\n    main_window -> button_0\n    main_window -> button_plus\n    main_window -> button_minus\n    main_window -> button_multiply\n    main_window -> button_divide\n    main_window -> button_equals\n    main_window -> button_clear\n    \n    display @ top:10,left:10,right:10\n    \n    button_7 @ top:70,left:10\n    button_8 @ top:70,left:80\n    button_9 @ top:70,left:150\n    button_divide @ top:70,left:220\n    \n    button_4 @ top:140,left:10\n    button_5 @ top:140,left:80\n    button_6 @ top:140,left:150\n    button_multiply @ top:140,left:220\n    \n    button_1 @ top:210,left:10\n    button_2 @ top:210,left:80\n    button_3 @ top:210,left:150\n    button_minus @ top:210,left:220\n    \n    button_0 @ top:280,left:10\n    button_clear @ top:280,left:80\n    button_equals @ top:280,left:150\n    button_plus @ top:280,left:220\n\n\n// Define style\nui_style calculator_style \n    background-color: #f0f0f0\n    text-color: #333333\n    font-family: \"Arial\"\n    font-size: 18\n\n\nui_style button_style \n    background-color: #4CAF50\n    text-color: white\n    border-radius: 5\n    font-weight: bold\n\n\nui_style display_style \n    background-color: white\n    text-color: #333333\n    border: 1px solid #cccccc\n    text-align: right\n    padding: 10\n\n\n// Define events\nui_event calculator_events \n    button_0 onClick: function_append_digit \"0\"\n    button_1 onClick: function_append_digit \"1\"\n    button_2 onClick: function_append_digit \"2\"\n    button_3 onClick: function_append_digit \"3\"\n    button_4 onClick: function_append_digit \"4\"\n    button_5 onClick: function_append_digit \"5\"\n    button_6 onClick: function_append_digit \"6\"\n    button_7 onClick: function_append_digit \"7\"\n    button_8 onClick: function_append_digit \"8\"\n    button_9 onClick: function_append_digit \"9\"\n    \n    button_plus onClick: function_set_operator \"+\"\n    button_minus onClick: function_set_operator \"-\"\n    button_multiply onClick: function_set_operator \"*\"\n    button_divide onClick: function_set_operator \"/\"\n    \n    button_equals onClick: function_calculate\n    button_clear onClick: function_clear\n\n\n// Global variables\ncurrent_value = 0\ndisplay_value = \"0\"\noperator = \"\"\nnew_operand = tama\n\n// Main function\nsimula main\n    // Initialize UI\n    init_ui \n    \n    // Show main window\n    show_window main_window\n    \n    // Start event loop\n    start_event_loop \n    \n    balik 0\n\n// Function to append a digit to the display\nsimula function_append_digit digit\n    kung new_operand\n        display_value = digit\n        new_operand = mali\n    kundi\n        kung display_value == \"0\"\n            display_value = digit\n        kundi\n            display_value = display_value + digit\n    \n    set_text display, display_value\n    balik tama\n\n// Function to set the operator\nsimula function_set_operator op\n    current_value = parse_number display_value\n    operator = op\n    new_operand = tama\n    balik tama\n\n// Function to calculate the result\nsimula function_calculate\n    second_value = parse_number display_value\n    result = 0\n    \n    kung operator == \"+\"\n        result = current_value + second_value\n    kundi kung operator == \"-\"\n        result = current_value - second_value\n    kundi kung operator == \"*\"\n        result = current_value * second_value\n    kundi kung operator == \"/\"\n        kung second_value == 0\n            set_text display, \"Error\"\n            balik tama\n        result = current_value / second_value\n    \n    display_value = to_string result\n    set_text display, display_value\n    \n    current_value = result\n    new_operand = tama\n    \n    balik tama\n\n// Function to clear the calculator\nsimula function_clear\n    current_value = 0\n    display_value = \"0\"\n    operator = \"\"\n    new_operand = tama\n    \n    set_text display, display_value\n    balik tama\n\n// Helper function to parse a number from a string\nsimula parse_number str\n    balik to_number str\n\n// Helper function to convert a number to a string\nsimula to_string num\n    balik num\n",
      "error_message": null,
      "applied_rules": [
        "function_call_with_parentheses",
        "semicolons",
        "braces"
      ],
      "timestamp": 1747558426.510745
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558426.5108566,
    "last_seen": 1747558426.5108566
  },
  "ee550eb04b8273af99e5f889b70fa4e6": {
    "type": "optimization_event",
    "data": {
      "original_code": "// GZ UI Example\n// This example demonstrates the UI capabilities of the GZ programming language\n\n// Define UI elements\nui_element main_window \n    type: window\n    title: \"GZ Calculator\"\n    width: 300\n    height: 400\n    background: #f0f0f0\n\n\nui_element display \n    type: textbox\n    width: 280\n    height: 50\n    readonly: tama\n    text: \"0\"\n    font-size: 24\n\n\nui_element button_1 \n    type: button\n    text: \"1\"\n    width: 60\n    height: 60\n\n\nui_element button_2 \n    type: button\n    text: \"2\"\n    width: 60\n    height: 60\n\n\nui_element button_3 \n    type: button\n    text: \"3\"\n    width: 60\n    height: 60\n\n\nui_element button_4 \n    type: button\n    text: \"4\"\n    width: 60\n    height: 60\n\n\nui_element button_5 \n    type: button\n    text: \"5\"\n    width: 60\n    height: 60\n\n\nui_element button_6 \n    type: button\n    text: \"6\"\n    width: 60\n    height: 60\n\n\nui_element button_7 \n    type: button\n    text: \"7\"\n    width: 60\n    height: 60\n\n\nui_element button_8 \n    type: button\n    text: \"8\"\n    width: 60\n    height: 60\n\n\nui_element button_9 \n    type: button\n    text: \"9\"\n    width: 60\n    height: 60\n\n\nui_element button_0 \n    type: button\n    text: \"0\"\n    width: 60\n    height: 60\n\n\nui_element button_plus \n    type: button\n    text: \"+\"\n    width: 60\n    height: 60\n\n\nui_element button_minus \n    type: button\n    text: \"-\"\n    width: 60\n    height: 60\n\n\nui_element button_multiply \n    type: button\n    text: \"*\"\n    width: 60\n    height: 60\n\n\nui_element button_divide \n    type: button\n    text: \"/\"\n    width: 60\n    height: 60\n\n\nui_element button_equals \n    type: button\n    text: \"=\"\n    width: 60\n    height: 60\n\n\nui_element button_clear \n    type: button\n    text: \"C\"\n    width: 60\n    height: 60\n\n\n// Define layout\nui_layout calculator_layout \n    main_window -> display\n    main_window -> button_1\n    main_window -> button_2\n    main_window -> button_3\n    main_window -> button_4\n    main_window -> button_5\n    main_window -> button_6\n    main_window -> button_7\n    main_window -> button_8\n    main_window -> button_9\n    main_window -> button_0\n    main_window -> button_plus\n    main_window -> button_minus\n    main_window -> button_multiply\n    main_window -> button_divide\n    main_window -> button_equals\n    main_window -> button_clear\n    \n    display @ top:10,left:10,right:10\n    \n    button_7 @ top:70,left:10\n    button_8 @ top:70,left:80\n    button_9 @ top:70,left:150\n    button_divide @ top:70,left:220\n    \n    button_4 @ top:140,left:10\n    button_5 @ top:140,left:80\n    button_6 @ top:140,left:150\n    button_multiply @ top:140,left:220\n    \n    button_1 @ top:210,left:10\n    button_2 @ top:210,left:80\n    button_3 @ top:210,left:150\n    button_minus @ top:210,left:220\n    \n    button_0 @ top:280,left:10\n    button_clear @ top:280,left:80\n    button_equals @ top:280,left:150\n    button_plus @ top:280,left:220\n\n\n// Define style\nui_style calculator_style \n    background-color: #f0f0f0\n    text-color: #333333\n    font-family: \"Arial\"\n    font-size: 18\n\n\nui_style button_style \n    background-color: #4CAF50\n    text-color: white\n    border-radius: 5\n    font-weight: bold\n\n\nui_style display_style \n    background-color: white\n    text-color: #333333\n    border: 1px solid #cccccc\n    text-align: right\n    padding: 10\n\n\n// Define events\nui_event calculator_events \n    button_0 onClick: function_append_digit \"0\"\n    button_1 onClick: function_append_digit \"1\"\n    button_2 onClick: function_append_digit \"2\"\n    button_3 onClick: function_append_digit \"3\"\n    button_4 onClick: function_append_digit \"4\"\n    button_5 onClick: function_append_digit \"5\"\n    button_6 onClick: function_append_digit \"6\"\n    button_7 onClick: function_append_digit \"7\"\n    button_8 onClick: function_append_digit \"8\"\n    button_9 onClick: function_append_digit \"9\"\n    \n    button_plus onClick: function_set_operator \"+\"\n    button_minus onClick: function_set_operator \"-\"\n    button_multiply onClick: function_set_operator \"*\"\n    button_divide onClick: function_set_operator \"/\"\n    \n    button_equals onClick: function_calculate\n    button_clear onClick: function_clear\n\n\n// Global variables\ncurrent_value = 0\ndisplay_value = \"0\"\noperator = \"\"\nnew_operand = tama\n\n// Main function\nsimula main\n    // Initialize UI\n    init_ui \n    \n    // Show main window\n    show_window main_window\n    \n    // Start event loop\n    start_event_loop \n    \n    balik 0\n\n// Function to append a digit to the display\nsimula function_append_digit digit\n    kung new_operand\n        display_value = digit\n        new_operand = mali\n    kundi\n        kung display_value == \"0\"\n            display_value = digit\n        kundi\n            display_value = display_value + digit\n    \n    set_text display, display_value\n    balik tama\n\n// Function to set the operator\nsimula function_set_operator op\n    current_value = parse_number display_value\n    operator = op\n    new_operand = tama\n    balik tama\n\n// Function to calculate the result\nsimula function_calculate\n    second_value = parse_number display_value\n    result = 0\n    \n    kung operator == \"+\"\n        result = current_value + second_value\n    kundi kung operator == \"-\"\n        result = current_value - second_value\n    kundi kung operator == \"*\"\n        result = current_value * second_value\n    kundi kung operator == \"/\"\n        kung second_value == 0\n            set_text display, \"Error\"\n            balik tama\n        result = current_value / second_value\n    \n    display_value = to_string result\n    set_text display, display_value\n    \n    current_value = result\n    new_operand = tama\n    \n    balik tama\n\n// Function to clear the calculator\nsimula function_clear\n    current_value = 0\n    display_value = \"0\"\n    operator = \"\"\n    new_operand = tama\n    \n    set_text display, display_value\n    balik tama\n\n// Helper function to parse a number from a string\nsimula parse_number str\n    balik to_number str\n\n// Helper function to convert a number to a string\nsimula to_string num\n    balik num\n",
      "optimized_code": "// GZ UI Example\n// This example demonstrates the UI capabilities of the GZ programming language\n\n// Define UI elements\nui_element main_window \n    type: window\n    title: \"GZ Calculator\"\n    width: 300\n    height: 400\n    background: #f0f0f0\n\n\nui_element display \n    type: textbox\n    width: 280\n    height: 50\n    readonly: tama\n    text: \"0\"\n    font-size: 24\n\n\nui_element button_1 \n    type: button\n    text: \"1\"\n    width: 60\n    height: 60\n\n\nui_element button_2 \n    type: button\n    text: \"2\"\n    width: 60\n    height: 60\n\n\nui_element button_3 \n    type: button\n    text: \"3\"\n    width: 60\n    height: 60\n\n\nui_element button_4 \n    type: button\n    text: \"4\"\n    width: 60\n    height: 60\n\n\nui_element button_5 \n    type: button\n    text: \"5\"\n    width: 60\n    height: 60\n\n\nui_element button_6 \n    type: button\n    text: \"6\"\n    width: 60\n    height: 60\n\n\nui_element button_7 \n    type: button\n    text: \"7\"\n    width: 60\n    height: 60\n\n\nui_element button_8 \n    type: button\n    text: \"8\"\n    width: 60\n    height: 60\n\n\nui_element button_9 \n    type: button\n    text: \"9\"\n    width: 60\n    height: 60\n\n\nui_element button_0 \n    type: button\n    text: \"0\"\n    width: 60\n    height: 60\n\n\nui_element button_plus \n    type: button\n    text: \"+\"\n    width: 60\n    height: 60\n\n\nui_element button_minus \n    type: button\n    text: \"-\"\n    width: 60\n    height: 60\n\n\nui_element button_multiply \n    type: button\n    text: \"*\"\n    width: 60\n    height: 60\n\n\nui_element button_divide \n    type: button\n    text: \"/\"\n    width: 60\n    height: 60\n\n\nui_element button_equals \n    type: button\n    text: \"=\"\n    width: 60\n    height: 60\n\n\nui_element button_clear \n    type: button\n    text: \"C\"\n    width: 60\n    height: 60\n\n\n// Define layout\nui_layout calculator_layout \n    main_window -> display\n    main_window -> button_1\n    main_window -> button_2\n    main_window -> button_3\n    main_window -> button_4\n    main_window -> button_5\n    main_window -> button_6\n    main_window -> button_7\n    main_window -> button_8\n    main_window -> button_9\n    main_window -> button_0\n    main_window -> button_plus\n    main_window -> button_minus\n    main_window -> button_multiply\n    main_window -> button_divide\n    main_window -> button_equals\n    main_window -> button_clear\n    \n    display @ top:10,left:10,right:10\n    \n    button_7 @ top:70,left:10\n    button_8 @ top:70,left:80\n    button_9 @ top:70,left:150\n    button_divide @ top:70,left:220\n    \n    button_4 @ top:140,left:10\n    button_5 @ top:140,left:80\n    button_6 @ top:140,left:150\n    button_multiply @ top:140,left:220\n    \n    button_1 @ top:210,left:10\n    button_2 @ top:210,left:80\n    button_3 @ top:210,left:150\n    button_minus @ top:210,left:220\n    \n    button_0 @ top:280,left:10\n    button_clear @ top:280,left:80\n    button_equals @ top:280,left:150\n    button_plus @ top:280,left:220\n\n\n// Define style\nui_style calculator_style \n    background-color: #f0f0f0\n    text-color: #333333\n    font-family: \"Arial\"\n    font-size: 18\n\n\nui_style button_style \n    background-color: #4CAF50\n    text-color: white\n    border-radius: 5\n    font-weight: bold\n\n\nui_style display_style \n    background-color: white\n    text-color: #333333\n    border: 1px solid #cccccc\n    text-align: right\n    padding: 10\n\n\n// Define events\nui_event calculator_events \n    button_0 onClick: function_append_digit \"0\"\n    button_1 onClick: function_append_digit \"1\"\n    button_2 onClick: function_append_digit \"2\"\n    button_3 onClick: function_append_digit \"3\"\n    button_4 onClick: function_append_digit \"4\"\n    button_5 onClick: function_append_digit \"5\"\n    button_6 onClick: function_append_digit \"6\"\n    button_7 onClick: function_append_digit \"7\"\n    button_8 onClick: function_append_digit \"8\"\n    button_9 onClick: function_append_digit \"9\"\n    \n    button_plus onClick: function_set_operator \"+\"\n    button_minus onClick: function_set_operator \"-\"\n    button_multiply onClick: function_set_operator \"*\"\n    button_divide onClick: function_set_operator \"/\"\n    \n    button_equals onClick: function_calculate\n    button_clear onClick: function_clear\n\n\n// Global variables\ncurrent_value = 0\ndisplay_value = \"0\"\noperator = \"\"\nnew_operand = tama\n\n// Main function\nsimula main\n    // Initialize UI\n    init_ui \n    \n    // Show main window\n    show_window main_window\n    \n    // Start event loop\n    start_event_loop \n    \n    balik 0\n\n// Function to append a digit to the display\nsimula function_append_digit digit\n    kung new_operand\n        display_value = digit\n        new_operand = mali\n    kundi\n        kung display_value == \"0\"\n            display_value = digit\n        kundi\n            display_value += digit\n    \n    set_text display, display_value\n    balik tama\n\n// Function to set the operator\nsimula function_set_operator op\n    current_value = parse_number display_value\n    operator = op\n    new_operand = tama\n    balik tama\n\n// Function to calculate the result\nsimula function_calculate\n    second_value = parse_number display_value\n    result = 0\n    \n    kung operator == \"+\"\n        result = current_value + second_value\n    kundi kung operator == \"-\"\n        result = current_value - second_value\n    kundi kung operator == \"*\"\n        result = current_value * second_value\n    kundi kung operator == \"/\"\n        kung second_value == 0\n            set_text display, \"Error\"\n            balik tama\n        result = current_value / second_value\n    \n    display_value = to_string result\n    set_text display, display_value\n    \n    current_value = result\n    new_operand = tama\n    \n    balik tama\n\n// Function to clear the calculator\nsimula function_clear\n    current_value = 0\n    display_value = \"0\"\n    operator = \"\"\n    new_operand = tama\n    \n    set_text display, display_value\n    balik tama\n\n// Helper function to parse a number from a string\nsimula parse_number str\n    balik to_number str\n\n// Helper function to convert a number to a string\nsimula to_string num\n    balik num\n",
      "applied_techniques": [
        "compound_assignment"
      ],
      "optimization_level": 1,
      "timestamp": 1747558426.517806
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558426.517891,
    "last_seen": 1747558426.517891
  },
  "5eb2ab8913752f584840f48327de18eb": {
    "type": "optimization_rule",
    "data": {
      "name": "compound_+",
      "pattern": "(display_value)\\s*=\\s*\\1\\s*\\+\\s*(digit)",
      "replacement": "\\1 += \\2",
      "explanation": "Use compound assignment for + operation"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558426.523658,
    "last_seen": 1747558426.523658
  },
  "21f9ec00b7444f65928526a942ee3a50": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_definitions",
      "value": "main",
      "source": "examples/ui_example.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558431.8974771,
    "last_seen": 1747558431.8974774
  },
  "23d7cb3d15110a0f2778dfbbfb790ee8": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_definitions",
      "value": "function_append_digit",
      "source": "examples/ui_example.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558431.9036572,
    "last_seen": 1747558431.9036572
  },
  "1aa01fb4515d2179aaf2f83da35d9d6b": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_definitions",
      "value": "function_set_operator",
      "source": "examples/ui_example.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558431.912755,
    "last_seen": 1747558431.912755
  },
  "94190f86e9cc8b4e48407601b08601a1": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_definitions",
      "value": "function_calculate",
      "source": "examples/ui_example.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558431.9448318,
    "last_seen": 1747558431.9448318
  },
  "1ef8595951871ebf11e5d84bfb4dbff6": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_definitions",
      "value": "function_clear",
      "source": "examples/ui_example.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558431.955417,
    "last_seen": 1747558431.955417
  },
  "1f218d5939b9402212693d014da6a0b0": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_definitions",
      "value": "parse_number",
      "source": "examples/ui_example.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558431.962122,
    "last_seen": 1747558431.9621222
  },
  "34a825fb407c1bb0b0dca3a6c9316d94": {
    "type": "syntax_pattern",
    "data": {
      "type": "function_definitions",
      "value": "to_string",
      "source": "examples/ui_example.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558431.9705443,
    "last_seen": 1747558431.9705446
  },
  "9d0eb73e13249f0bc473669bd4ab1d53": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "current_value",
      "source": "examples/ui_example.gz"
    },
    "frequency": 4,
    "confidence": 0.5,
    "created": 1747558431.978009,
    "last_seen": 1747558432.0441153
  },
  "6716724c893841483b5e8ad96429f2f5": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "display_value",
      "source": "examples/ui_example.gz"
    },
    "frequency": 6,
    "confidence": 0.5,
    "created": 1747558431.989201,
    "last_seen": 1747558432.0443153
  },
  "526bfb95857f28de2a895181534acd11": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "operator",
      "source": "examples/ui_example.gz"
    },
    "frequency": 7,
    "confidence": 0.5,
    "created": 1747558432.0075746,
    "last_seen": 1747558432.0444813
  },
  "5c12ec7042394a80731011d86bd12874": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "new_operand",
      "source": "examples/ui_example.gz"
    },
    "frequency": 5,
    "confidence": 0.5,
    "created": 1747558432.0187023,
    "last_seen": 1747558432.0446744
  },
  "873fd294e5a47480a61d05a08bb8b2d4": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "second_value",
      "source": "examples/ui_example.gz"
    },
    "frequency": 2,
    "confidence": 0.5,
    "created": 1747558432.0267522,
    "last_seen": 1747558432.0432222
  },
  "35c84d18dbccfcaec413210baef9fd27": {
    "type": "syntax_pattern",
    "data": {
      "type": "variable_assignments",
      "value": "result",
      "source": "examples/ui_example.gz"
    },
    "frequency": 5,
    "confidence": 0.5,
    "created": 1747558432.0346997,
    "last_seen": 1747558432.0434163
  },
  "208fd8ea496357349b8d15cef53391dd": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "new_operand",
      "source": "examples/ui_example.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558432.0449002,
    "last_seen": 1747558432.0449007
  },
  "bd969a07e80ecad18c690e24b7aa78a9": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "display_value == \"0\"",
      "source": "examples/ui_example.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558432.0563006,
    "last_seen": 1747558432.0563009
  },
  "40b894cd3c536df6b97ded0cc04dfac3": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "operator == \"+\"",
      "source": "examples/ui_example.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558432.0779586,
    "last_seen": 1747558432.0779588
  },
  "948db2d2a1a3c823e44054ad944970a7": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "operator == \"-\"",
      "source": "examples/ui_example.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558432.087675,
    "last_seen": 1747558432.0876753
  },
  "6212e44390839ead076ae0d63bb45ee2": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "operator == \"*\"",
      "source": "examples/ui_example.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558432.0954802,
    "last_seen": 1747558432.0954807
  },
  "27cfb7ccaa47dc7d683a71544ed6b047": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "operator == \"/\"",
      "source": "examples/ui_example.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558432.1022036,
    "last_seen": 1747558432.1022038
  },
  "b3c457ab6c7c142df3c7cf71b88e237a": {
    "type": "syntax_pattern",
    "data": {
      "type": "conditionals",
      "value": "second_value == 0",
      "source": "examples/ui_example.gz"
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558432.1078212,
    "last_seen": 1747558432.1078215
  },
  "93cee53c9c396d57c823d4e2eee2b486": {
    "type": "code_sample",
    "data": {
      "code": "// GZ UI Example\n// This example demonstrates the UI capabilities of the GZ programming language\n\n// Define UI elements\nui_element main_window \n    type: window\n    title: \"GZ Calculator\"\n    width: 300\n    height: 400\n    background: #f0f0f0\n\n\nui_element display \n    type: textbox\n    width: 280\n    height: 50\n    readonly: tama\n    text: \"0\"\n    font-size: 24\n\n\nui_element button_1 \n    type: button\n    text: \"1\"\n    width: 60\n    height: 60\n\n\nui_element button_2 \n    type: button\n    text: \"2\"\n    width: 60\n    height: 60\n\n\nui_element button_3 \n    type: button\n    text: \"3\"\n    width: 60\n    height: 60\n\n\nui_element button_4 \n    type: button\n    text: \"4\"\n    width: 60\n    height: 60\n\n\nui_element button_5 \n    type: button\n    text: \"5\"\n    width: 60\n    height: 60\n\n\nui_element button_6 \n    type: button\n    text: \"6\"\n    width: 60\n    height: 60\n\n\nui_element button_7 \n    type: button\n    text: \"7\"\n    width: 60\n    height: 60\n\n\nui_element button_8 \n    type: button\n    text: \"8\"\n    width: 60\n    height: 60\n\n\nui_element button_9 \n    type: button\n    text: \"9\"\n    width: 60\n    height: 60\n\n\nui_element button_0 \n    type: button\n    text: \"0\"\n    width: 60\n    height: 60\n\n\nui_element button_plus \n    type: button\n    text: \"+\"\n    width: 60\n    height: 60\n\n\nui_element button_minus \n    type: button\n    text: \"-\"\n    width: 60\n    height: 60\n\n\nui_element button_multiply \n    type: button\n    text: \"*\"\n    width: 60\n    height: 60\n\n\nui_element button_divide \n    type: button\n    text: \"/\"\n    width: 60\n    height: 60\n\n\nui_element button_equals \n    type: button\n    text: \"=\"\n    width: 60\n    height: 60\n\n\nui_element button_clear \n    type: button\n    text: \"C\"\n    width: 60\n    height: 60\n\n\n// Define layout\nui_layout calculator_layout \n    main_window -> display\n    main_window -> button_1\n    main_window -> button_2\n    main_window -> button_3\n    main_window -> button_4\n    main_window -> button_5\n    main_window -> button_6\n    main_window -> button_7\n    main_window -> button_8\n    main_window -> button_9\n    main_window -> button_0\n    main_window -> button_plus\n    main_window -> button_minus\n    main_window -> button_multiply\n    main_window -> button_divide\n    main_window -> button_equals\n    main_window -> button_clear\n    \n    display @ top:10,left:10,right:10\n    \n    button_7 @ top:70,left:10\n    button_8 @ top:70,left:80\n    button_9 @ top:70,left:150\n    button_divide @ top:70,left:220\n    \n    button_4 @ top:140,left:10\n    button_5 @ top:140,left:80\n    button_6 @ top:140,left:150\n    button_multiply @ top:140,left:220\n    \n    button_1 @ top:210,left:10\n    button_2 @ top:210,left:80\n    button_3 @ top:210,left:150\n    button_minus @ top:210,left:220\n    \n    button_0 @ top:280,left:10\n    button_clear @ top:280,left:80\n    button_equals @ top:280,left:150\n    button_plus @ top:280,left:220\n\n\n// Define style\nui_style calculator_style \n    background-color: #f0f0f0\n    text-color: #333333\n    font-family: \"Arial\"\n    font-size: 18\n\n\nui_style button_style \n    background-color: #4CAF50\n    text-color: white\n    border-radius: 5\n    font-weight: bold\n\n\nui_style display_style \n    background-color: white\n    text-color: #333333\n    border: 1px solid #cccccc\n    text-align: right\n    padding: 10\n\n\n// Define events\nui_event calculator_events \n    button_0 onClick: function_append_digit \"0\"\n    button_1 onClick: function_append_digit \"1\"\n    button_2 onClick: function_append_digit \"2\"\n    button_3 onClick: function_append_digit \"3\"\n    button_4 onClick: function_append_digit \"4\"\n    button_5 onClick: function_append_digit \"5\"\n    button_6 onClick: function_append_digit \"6\"\n    button_7 onClick: function_append_digit \"7\"\n    button_8 onClick: function_append_digit \"8\"\n    button_9 onClick: function_append_digit \"9\"\n    \n    button_plus onClick: function_set_operator \"+\"\n    button_minus onClick: function_set_operator \"-\"\n    button_multiply onClick: function_set_operator \"*\"\n    button_divide onClick: function_set_operator \"/\"\n    \n    button_equals onClick: function_calculate\n    button_clear onClick: function_clear\n\n\n// Global variables\ncurrent_value = 0\ndisplay_value = \"0\"\noperator = \"\"\nnew_operand = tama\n\n// Main function\nsimula main\n    // Initialize UI\n    init_ui \n    \n    // Show main window\n    show_window main_window\n    \n    // Start event loop\n    start_event_loop \n    \n    balik 0\n\n// Function to append a digit to the display\nsimula function_append_digit digit\n    kung new_operand\n        display_value = digit\n        new_operand = mali\n    kundi\n        kung display_value == \"0\"\n            display_value = digit\n        kundi\n            display_value += digit\n    \n    set_text display, display_value\n    balik tama\n\n// Function to set the operator\nsimula function_set_operator op\n    current_value = parse_number display_value\n    operator = op\n    new_operand = tama\n    balik tama\n\n// Function to calculate the result\nsimula function_calculate\n    second_value = parse_number display_value\n    result = 0\n    \n    kung operator == \"+\"\n        result = current_value + second_value\n    kundi kung operator == \"-\"\n        result = current_value - second_value\n    kundi kung operator == \"*\"\n        result = current_value * second_value\n    kundi kung operator == \"/\"\n        kung second_value == 0\n            set_text display, \"Error\"\n            balik tama\n        result = current_value / second_value\n    \n    display_value = to_string result\n    set_text display, display_value\n    \n    current_value = result\n    new_operand = tama\n    \n    balik tama\n\n// Function to clear the calculator\nsimula function_clear\n    current_value = 0\n    display_value = \"0\"\n    operator = \"\"\n    new_operand = tama\n    \n    set_text display, display_value\n    balik tama\n\n// Helper function to parse a number from a string\nsimula parse_number str\n    balik to_number str\n\n// Helper function to convert a number to a string\nsimula to_string num\n    balik num\n",
      "source": "examples/ui_example.gz",
      "timestamp": 1747558432.115554
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747558432.1156533,
    "last_seen": 1747558432.1156533
  },
  "376300895999f2dc42e439740047e2ee": {
    "type": "correction_event",
    "data": {
      "original_code": "// Run Evolving AI\n// This script runs the GZ Evolving AI system\n\n// Import the evolving AI\ninclude \"src/ai/gz_evolving_ai.gz\"\n\n// Main function\nsimula main\n    // Print welcome message\n    print(\"=================================================\")\n    print(\"             GZ Evolving AI System               \")\n    print(\"=================================================\")\n    print(\"This AI can think autonomously, learn, and evolve\")\n    print(\"over time. It will show its thinking process and\")\n    print(\"can ask questions when uncertain.\")\n    print(\"\")\n    print(\"Commands:\")\n    print(\"  exit, quit - Exit the program\")\n    print(\"  save - Save the AI's current state\")\n    print(\"  autonomous - Toggle autonomous mode\")\n    print(\"  thinking - Toggle showing thinking process\")\n    print(\"=================================================\")\n    print(\"\")\n    \n    // Create the AI\n    ai = new EvolvingAI()\n    \n    // Flag to show thinking process\n    show_thinking = mali\n    \n    // Main interaction loop\n    habang tama\n        // Get user input\n        print(\"> \", end=\"\")\n        user_input = input()\n        \n        // Check for special commands\n        kung user_input == \"exit\" or user_input == \"quit\"\n            break\n        kungdi user_input == \"save\"\n            ai.save()\n            print(\"AI state saved.\")\n            continue\n        kungdi user_input == \"autonomous\"\n            ai.toggle_autonomous_mode()\n            kung ai.autonomous_mode\n                ai.run_autonomous()\n            continue\n        kungdi user_input == \"thinking\"\n            show_thinking = not show_thinking\n            print(\"Showing thinking process: \" + (show_thinking ? \"Enabled\" : \"Disabled\"))\n            continue\n        \n        // Process normal input\n        kung show_thinking\n            print(\"\\nThinking process:\")\n            print(\"-----------------\")\n            \n            // Get initial thoughts\n            initial_thoughts = ai.thought_processor.process_initial(user_input)\n            print(\"Initial understanding: \" + initial_thoughts[\"parsed_intent\"][\"type\"])\n            print(\"Initial concepts: \" + to_string(initial_thoughts[\"initial_concepts\"]))\n            \n            // Show recursive thinking\n            para depth 1 to ai.thinking_depth\n                print(\"\\nThinking depth \" + to_string(depth) + \":\")\n                \n                // Get thoughts at this depth\n                thoughts = ai.recursive_thinking(initial_thoughts, depth)\n                \n                // Show confidence\n                print(\"Confidence: \" + to_string(thoughts[\"meta\"][\"confidence\"]))\n                \n                // Show key insights if available\n                kung \"synthesis\" in thoughts and \"key_insights\" in thoughts[\"synthesis\"]\n                    print(\"Key insights: \" + to_string(thoughts[\"synthesis\"][\"key_insights\"]))\n                \n                // Show uncertainty areas\n                kung \"meta\" in thoughts and \"uncertainty_areas\" in thoughts[\"meta\"]\n                    print(\"Uncertainty areas: \" + to_string(thoughts[\"meta\"][\"uncertainty_areas\"]))\n            \n            print(\"\\nGenerating response...\")\n            print(\"-----------------\\n\")\n        \n        // Get response\n        response = ai.think(user_input)\n        \n        // Display response\n        print(\"AI: \" + response)\n        print(\"\")\n    \n    // Save before exiting\n    ai.save()\n    print(\"Goodbye!\")\n    \n    balik 0\n",
      "corrected_code": "// Run Evolving AI\n// This script runs the GZ Evolving AI system\n\n// Import the evolving AI\ninclude \"src/ai/gz_evolving_ai.gz\"\n\n// Main function\nsimula main\n    // Print welcome message\n    print \"=================================================\"\n    print \"             GZ Evolving AI System               \"\n    print \"=================================================\"\n    print \"This AI can think autonomously, learn, and evolve\"\n    print \"over time. It will show its thinking process and\"\n    print \"can ask questions when uncertain.\"\n    print \"\"\n    print \"Commands:\"\n    print \"  exit, quit - Exit the program\"\n    print \"  save - Save the AI's current state\"\n    print \"  autonomous - Toggle autonomous mode\"\n    print \"  thinking - Toggle showing thinking process\"\n    print \"=================================================\"\n    print \"\"\n    \n    // Create the AI\n    ai = new EvolvingAI \n    \n    // Flag to show thinking process\n    show_thinking = mali\n    \n    // Main interaction loop\n    habang tama\n        // Get user input\n        print \"> \", end=\"\"\n        user_input = input \n        \n        // Check for special commands\n        kung user_input == \"exit\" or user_input == \"quit\"\n            break\n        kungdi user_input == \"save\"\n            ai.save \n            print \"AI state saved.\"\n            continue\n        kungdi user_input == \"autonomous\"\n            ai.toggle_autonomous_mode \n            kung ai.autonomous_mode\n                ai.run_autonomous \n            continue\n        kungdi user_input == \"thinking\"\n            show_thinking = not show_thinking\n            print \"Showing thinking process: \" + (show_thinking ? \"Enabled\" : \"Disabled\")\n            continue\n        \n        // Process normal input\n        kung show_thinking\n            print \"\\nThinking process:\"\n            print \"-----------------\"\n            \n            // Get initial thoughts\n            initial_thoughts = ai.thought_processor.process_initial user_input\n            print \"Initial understanding: \" + initial_thoughts[\"parsed_intent\"][\"type\"]\n            print \"Initial concepts: \" + to_string(initial_thoughts[\"initial_concepts\"])\n            \n            // Show recursive thinking\n            para depth 1 to ai.thinking_depth\n                print \"\\nThinking depth \" + to_string(depth + \":\")\n                \n                // Get thoughts at this depth\n                thoughts = ai.recursive_thinking initial_thoughts, depth\n                \n                // Show confidence\n                print \"Confidence: \" + to_string(thoughts[\"meta\"][\"confidence\"])\n                \n                // Show key insights if available\n                kung \"synthesis\" in thoughts and \"key_insights\" in thoughts[\"synthesis\"]\n                    print \"Key insights: \" + to_string(thoughts[\"synthesis\"][\"key_insights\"])\n                \n                // Show uncertainty areas\n                kung \"meta\" in thoughts and \"uncertainty_areas\" in thoughts[\"meta\"]\n                    print \"Uncertainty areas: \" + to_string(thoughts[\"meta\"][\"uncertainty_areas\"])\n            \n            print \"\\nGenerating response...\"\n            print \"-----------------\\n\"\n        \n        // Get response\n        response = ai.think user_input\n        \n        // Display response\n        print \"AI: \" + response\n        print \"\"\n    \n    // Save before exiting\n    ai.save \n    print \"Goodbye!\"\n    \n    balik 0\n",
      "error_message": null,
      "applied_rules": [
        "function_call_with_parentheses"
      ],
      "timestamp": 1747574283.213271
    },
    "frequency": 1,
    "confidence": 0.5,
    "created": 1747574283.2139149,
    "last_seen": 1747574283.2139153
  }
}